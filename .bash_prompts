###########################################################
#
#   ~/.bash_prompts
#
#	Set up prompts for interactive shells
#
###########################################################
#
#	PS1    The value of this parameter is expanded (see PROMPTING  below)  and
#			used  as the primary prompt string.  The default value is ``\s-\v\$
#			''.
#	PS2    The value of this parameter is expanded as with PS1 and used as the
#			secondary prompt string.  The default is ``> ''.
#	PS3    The  value  of  this parameter is used as the prompt for the select
#			command (see SHELL GRAMMAR above).
#	PS4    The value of this parameter is expanded as with PS1 and  the  value
#			is  printed  before  each command bash displays during an execution
#			trace.  The first character of PS4 is replicated multiple times, as
#			necessary, to indicate multiple levels of indirection.  The default
#			is ``+ ''.
#	PROMPTING
#		When executing interactively, bash displays the primary prompt PS1 when it
#		is ready to read a command, and the secondary prompt  PS2  when  it  needs
#		more  input to complete a command.  Bash allows these prompt strings to be
#		customized by inserting a number of backslash-escaped  special  characters
#		that are decoded as follows:
#				\a     an ASCII bell character (07)
#				\d     the date in "Weekday Month Date" format (e.g., "Tue May 26")
#				\D{format}
#						the  format  is  passed  to  strftime(3)  and  the result is
#						inserted into the prompt string; an empty format results  in
#						a  locale-specific  time  representation.   The  braces  are
#						required
#				\e     an ASCII escape character (033)
#				\h     the hostname up to the first `.'
#				\H     the hostname
#				\j     the number of jobs currently managed by the shell
#				\l     the basename of the shell's terminal device name
#				\n     newline
#				\r     carriage return
#				\s     the name of the shell, the basename of $0 (the portion  fol-
#						lowing the final slash)
#				\t     the current time in 24-hour HH:MM:SS format
#				\T     the current time in 12-hour HH:MM:SS format
#				\@     the current time in 12-hour am/pm format
#				\A     the current time in 24-hour HH:MM format
#				\u     the username of the current user
#				\v     the version of bash (e.g., 2.00)
#				\V     the release of bash, version + patch level (e.g., 2.00.0)
#				\w     the current working directory, with $HOME abbreviated with a
#						tilde (uses the value of the PROMPT_DIRTRIM variable)
#				\W     the basename of the current working  directory,  with  $HOME
#						abbreviated with a tilde
#				\!     the history number of this command
#				\#     the command number of this command
#				\$     if the effective UID is 0, a #, otherwise a $
#				\nnn   the character corresponding to the octal number nnn
#				\\     a backslash
#				\[     begin  a sequence of non-printing characters, which could be
#						used to embed a terminal control sequence into the prompt
#				\]     end a sequence of non-printing characters
#
#		The command number and the history number are usually different: the  his-
#		tory  number  of  a command is its position in the history list, which may
#		include commands restored from the history file (see HISTORY below), while
#		the  command  number  is the position in the sequence of commands executed
#		during the current shell session.  After the  string  is  decoded,  it  is
#		expanded  via parameter expansion, command substitution, arithmetic expan-
#		sion, and quote removal, subject to the  value  of  the  promptvars  shell
#		option  (see the description of the shopt command under SHELL BUILTIN COM-
#		MANDS below).
#
###########################################################

if test -n "$BASH_TRACE_STARTUP"; then echo Entering '~/.bash_prompts'; fi

# use a function to scope all of these variables
function set_prompt() {

# xterm control sequences
local csi='\033['				# Control Sequence Introducer
local osc='\033]'				# Operating System Command
local bel='\007'				# Bell character
local icnttl='0;'
local icn='1;'
local ttl='2;'

# echo nonprintable escape
local esc='\['
local cse='\]'

# ansi color escape sequences
local ps_default=$esc$csi'0m'$cse

local ps_black=$esc$csi'30m'$cse
local ps_red=$esc$csi'31m'$cse
local ps_green=$esc$csi'32m'$cse
local ps_yellow=$esc$csi'33m'$cse
local ps_blue=$esc$csi'34m'$cse
local ps_magenta=$esc$csi'35m'$cse
local ps_cyan=$esc$csi'36m'$cse
local ps_white=$esc$csi'37m'$cse

local ps_bold_black=$esc$csi'1;30m'$cse
local ps_bold_red=$esc$csi'1;31m'$cse
local ps_bold_green=$esc$csi'1;32m'$cse
local ps_bold_yellow=$esc$csi'1;33m'$cse
local ps_bold_blue=$esc$csi'1;34m'$cse
local ps_bold_magenta=$esc$csi'1;35m'$cse
local ps_bold_cyan=$esc$csi'1;36m'$cse
local ps_bold_white=$esc$csi'1;37m'$cse

# pieces of the prompt
local ps_title=$esc$osc$ttl'\h: \w'$bel$cse
local ps_userhost=$ps_green'\u@\h'
local ps_cwd=$ps_yellow'\w'
local ps_time=$ps_magenta'\t'
local ps_git=$ps_cyan'$(__git_ps1)'
local ps_go=$ps_default'\$ '

# assemble the prompt
export PS1=$ps_title'\n'$ps_time' '$ps_userhost' '$ps_cwd' '$ps_git'\n'$ps_go
}

# call the prompt function
set_prompt

if test -n "$BASH_TRACE_STARTUP"; then echo Leaving '~/.bash_prompts'; fi
